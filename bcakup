int FiniteStateMachine::distinguishSequence(bool print) {

    vector<int> starInputStates;

    for(int inputState = 1; inputState <= stateNumber  ; ++inputState) {
        starInputStates.push_back(inputState);
    }

    produceUncertainty(starInputStates, 0, 0, 0, print);
}


void FiniteStateMachine::produceUncertainty(vector<int> tempInputStates, int level, int inputIter, int startIndex, bool print) {

    int tempOutState;
    int tempOutput;
    int index = 0;

    int inputNumber=3;

    vector<int> uncertaintyVector[inputNumber];
    vector<int> tempUncertaintyVector;
    int OneOutSequence[stateNumber*2/*buraya input sayısı gelecek*/];

    for (int j = 0; j < stateNumber*2; ++j) {
        OneOutSequence[j] = -99;
    }

    cout<<"call "<<"level = "<<level<<endl;
    cout<<level<<" - "<<inputIter<<endl;
    if(level == 3)
        return;

    for (int input = 0; input < inputNumber; ++input) {
        for (int i = 0; i < tempInputStates.size(); i++) {
            tie(tempOutState, tempOutput) = this->step(tempInputStates[i],input, print);
            OneOutSequence[input*tempInputStates.size() + i] = tempOutput; //outputları generate ediyor
            tempUncertaintyVector.push_back(tempOutState); //output stateleri generate ediyor
            if(level != 0) //sadece level 0 da index 0dan başlıyor, diğer durumlarda hesaplanmalı
                outputSequences.push_back(startIndex + (int)(stateNumber * inputNumber)*(inputIter) + (int)(input*tempInputStates.size() + i) );
            else
                outputSequences.push_back(input*tempInputStates.size() + i);
//                outputSequences.push_back(tempOutput);

        }


        for(auto &val: outputSequences)
            cout<<val<< "-";
        cout<<endl;
        uncertaintyVector[input] = tempUncertaintyVector;
        tempUncertaintyVector.clear();
    }


    startIndex = inputNumber*stateNumber*level + startIndex;
    cout<< "start index = "<<startIndex<<endl;
    for (int input = 0; input < inputNumber; ++input) {

        produceUncertainty(uncertaintyVector[input], level+1, input+1, startIndex,print);
    }

}